# Copyright (C) 2024 Advanced Micro Devices, Inc. All rights Reserved.
# SPDX-FileCopyrightText: 2025 Advanced Micro Devices, Inc.
#
# SPDX-License-Identifier: MIT

# Data types are defined as either aliases to Python-recognized ctypes,
# or enums defined with c_int base clases and attributes.
Datatypes:
  - rocgraph_int: c_int
  - rocgraph_indextype:
      bases: [ c_int ]
      attr:
        u16: 1
        i32: 2
        i64: 3
  - rocgraph_datatype:
      bases: [ c_int ]
      attr:
        f32_r: 151
        f64_r: 152
        f32_c: 154
        f64_c: 155
        i8_r:  160
        u8_r:  161
        i32_r: 162
        u32_r: 163
  - { single: f32_r, double: f64_r }
  - rocgraph_matrix_init:
      bases: [ c_int ]
      attr:
        rocgraph_matrix_random: 0
        rocgraph_matrix_laplace_2d: 1
        rocgraph_matrix_laplace_3d: 2
        rocgraph_matrix_file_mtx: 3
        rocgraph_matrix_file_smtx: 4
        rocgraph_matrix_file_rocalution: 5
        rocgraph_matrix_zero: 6
        rocgraph_matrix_tridiagonal: 7
        rocgraph_matrix_pentadiagonal: 8
  - rocgraph_matrix_init_kind:
      bases: [ c_int ]
      attr:
        rocgraph_matrix_init_kind_default: 0
        rocgraph_matrix_init_kind_tunedavg: 1
  - rocgraph_operation:
      bases: [ c_int ]
      attr:
        rocgraph_operation_none: 111
        rocgraph_operation_transpose: 112
        rocgraph_operation_conjugate_transpose: 113
  - rocgraph_index_base:
      bases: [ c_int ]
      attr:
        rocgraph_index_base_zero: 0
        rocgraph_index_base_one: 1
  - rocgraph_matrix_type:
      bases: [ c_int ]
      attr:
        rocgraph_matrix_type_general: 0
        rocgraph_matrix_type_symmetric: 1
        rocgraph_matrix_type_hermitian: 2
        rocgraph_matrix_type_triangular: 3
  - rocgraph_diag_type:
      bases: [ c_int ]
      attr:
        rocgraph_diag_type_non_unit: 0
        rocgraph_diag_type_unit: 1
  - rocgraph_fill_mode:
      bases: [ c_int ]
      attr:
        rocgraph_fill_mode_lower: 0
        rocgraph_fill_mode_upper: 1
  - rocgraph_storage_mode:
      bases: [ c_int ]
      attr:
        rocgraph_storage_mode_sorted: 0
        rocgraph_storage_mode_unsorted: 1
  - rocgraph_action:
      bases: [ c_int ]
      attr:
        rocgraph_action_symbolic: 0
        rocgraph_action_numeric: 1
  - rocgraph_hyb_partition:
      bases: [ c_int ]
      attr:
        rocgraph_hyb_partition_auto: 0
        rocgraph_hyb_partition_user: 1
        rocgraph_hyb_partition_max: 2
  - rocgraph_analysis_policy:
      bases: [ c_int ]
      attr:
        rocgraph_analysis_policy_reuse: 0
        rocgraph_analysis_policy_force: 1
  - rocgraph_solve_policy:
      bases: [ c_int ]
      attr:
        rocgraph_solve_policy_auto: 0
  - rocgraph_direction:
      bases: [ c_int ]
      attr:
        rocgraph_direction_row: 0
        rocgraph_direction_column: 1
  - rocgraph_order:
      bases: [c_int ]
      attr:
        rocgraph_order_row: 0
        rocgraph_order_column: 1
  - rocgraph_format:
      bases: [c_int ]
      attr:
        rocgraph_format_coo: 0
        rocgraph_format_coo_aos: 1
        rocgraph_format_csr: 2
        rocgraph_format_csc: 3
        rocgraph_format_ell: 4
        rocgraph_format_bell: 5
        rocgraph_format_bsr: 6

indextype i32: &i32
  - index_type_I: i32
    index_type_J: i32

indextype i64i32 mixture: &i64i32
  - index_type_I: i64
    index_type_J: i32

indextype i64: &i64
  - index_type_I: i64
    index_type_J: i64

indextype i32 and i64: &i32_i64
  - index_type_I: i32
    index_type_J: i32
  - index_type_I: i64
    index_type_J: i64

indextype i32 i64i32 mixture and i64: &i32i32_i64i32_i64i64
  - index_type_I: i32
    index_type_J: i32
  - index_type_I: i64
    index_type_J: i32
  - index_type_I: i64
    index_type_J: i64

Real precisions: &real_precisions
  - &int8_int8_int32_xyt_precision
    { a_type: i8_r, b_type: i8_r, c_type: i8_r, x_type: i8_r, y_type: i8_r, compute_type: i32_r }
  - &int8_int8_float32_xyt_precision
    { a_type: i8_r, b_type: i8_r, c_type: i8_r, x_type: i8_r, y_type: i8_r, compute_type: f32_r }
  - &int8_int8_int32_int32_axyt_precision
    { a_type: i8_r, b_type: i8_r, c_type: i8_r, x_type: i8_r, y_type: i32_r, compute_type: i32_r }
  - &int8_int8_float32_float32_axyt_precision
    { a_type: i8_r, b_type: i8_r, c_type: i8_r, x_type: i8_r, y_type: f32_r, compute_type: f32_r }
  - &int8_precision
    { a_type: i8_r, b_type: i8_r, c_type: i8_r, x_type: i8_r, y_type: i8_r, compute_type: i8_r }
  - &single_precision
    { a_type: f32_r, b_type: f32_r, c_type: f32_r, x_type: f32_r, y_type: f32_r, compute_type: f32_r }
  - &double_precision
    { a_type: f64_r, b_type: f64_r, c_type: f64_r, x_type: f64_r, y_type: f64_r, compute_type: f64_r }
  - &float32_float64_float64_float64
    { a_type: f32_r, x_type: f64_r, y_type: f64_r, compute_type: f64_r }


C precisions real: &single_only_precisions
  - *single_precision

C precisions real: &double_only_precisions
  - *double_precision

C precisions real: &single_double_precisions
  - *single_precision
  - *double_precision


# The Arguments struct passed directly to C++. See rocgraph_arguments.hpp.
# The order of the entries is significant, so it can't simply be a dictionary.
# The types on the RHS are eval'd for Python-recognized types including ctypes
# and datatypes defined in Datatypes above. T*n represents array of length n.
Arguments:
  - M: rocgraph_int
  - N: rocgraph_int
  - K: rocgraph_int
  - nnz: rocgraph_int
  - block_dim: rocgraph_int
  - row_block_dimA: rocgraph_int
  - col_block_dimA: rocgraph_int
  - row_block_dimB: rocgraph_int
  - col_block_dimB: rocgraph_int
  - dimx: rocgraph_int
  - dimy: rocgraph_int
  - dimz: rocgraph_int
  - ll: rocgraph_int
  - l: rocgraph_int
  - u: rocgraph_int
  - uu: rocgraph_int
  - index_type_I: rocgraph_indextype
  - index_type_J: rocgraph_indextype
  - a_type: rocgraph_datatype
  - b_type: rocgraph_datatype
  - c_type: rocgraph_datatype
  - x_type: rocgraph_datatype
  - y_type: rocgraph_datatype
  - compute_type: rocgraph_datatype
  - A_row_indextype: rocgraph_indextype
  - A_col_indextype: rocgraph_indextype
  - B_row_indextype: rocgraph_indextype
  - B_col_indextype: rocgraph_indextype
  - C_row_indextype: rocgraph_indextype
  - C_col_indextype: rocgraph_indextype
  - alpha: c_double
  - alphai: c_double
  - beta: c_double
  - betai: c_double
  - threshold: c_double
  - percentage: c_double
  - transA: rocgraph_operation
  - transB: rocgraph_operation
  - baseA: rocgraph_index_base
  - baseB: rocgraph_index_base
  - baseC: rocgraph_index_base
  - baseD: rocgraph_index_base
  - action: rocgraph_action
  - part: rocgraph_hyb_partition
  - matrix_type: rocgraph_matrix_type
  - diag: rocgraph_diag_type
  - uplo: rocgraph_fill_mode
  - storage: rocgraph_storage_mode
  - apol: rocgraph_analysis_policy
  - spol: rocgraph_solve_policy
  - direction: rocgraph_direction
  - order: rocgraph_order
  - orderB: rocgraph_order
  - orderC: rocgraph_order
  - formatA: rocgraph_format
  - formatB: rocgraph_format
  - matrix: rocgraph_matrix_init
  - matrix_init_kind: rocgraph_matrix_init_kind
  - unit_check: rocgraph_int
  - timing: rocgraph_int
  - iters: rocgraph_int
  - denseld: c_int64
  - batch_count: rocgraph_int
  - batch_count_A: rocgraph_int
  - batch_count_B: rocgraph_int
  - batch_count_C: rocgraph_int
  - batch_stride: rocgraph_int
  - ld_multiplier_B: rocgraph_int
  - ld_multiplier_C: rocgraph_int
  - algo: c_uint
  - numericboost: c_int
  - boosttol: c_double
  - boostval: c_double
  - boostvali: c_double
  - tolm: c_double
  - graph_test: c_bool
  - filename: c_char*128
  - function: c_char*64
  - name: c_char*64
  - category: c_char*32
  - hardware: c_char*32
  - skip_hardware: c_char*32
  - req_memory: c_uint

# These named dictionary lists [ {dict1}, {dict2}, etc. ] supply subsets of
# test arguments in a structured way. The dictionaries are applied to the test
# one at a time, to generate combinations.  If one of this table's entries is
# a dictionary of size one, it means that the argument named by its key takes
# on values paired with argument named by its value. For example:
#
# - function: precision
#
# when used with the code:
#
# function:
#   func1: prec1
#   func2: prec2
#   func3: prec3
#
# causes (function, precision) to take on the values (func1, prec1),
# (func2, prec2), (func3, prec3), etc.

Dictionary lists to expand:
  - arguments
  - M_N
  - M_N_K
  - dimx_dimy_dimz
  - transA_transB
  - alpha_beta
  - alpha_alphai
  - beta_betai
  - alphai_betai
  - boostval_boostvali
  - matrix_size
  - indextype
  - precision
  - function: precision

# In case an array argument needs to be passed directly to C as an array,
# it needs to be listed here to avoid being expanded into multiple test
# cases with each of its elements.
Lists to not expand:
  - e.g., an array argument not to be expanded

# Defaults
Defaults:
  M: -1
  N: -1
  K: -1
  nnz: -1
  block_dim: 2
  row_block_dimA: 2
  col_block_dimA: 2
  row_block_dimB: 2
  col_block_dimB: 2
  dimx: 1
  dimy: 1
  dimz: 1
  ll: -2
  l: -1
  u: 1
  uu: 2
  alpha: 1.0
  alphai: 0.0
  beta: 0.0
  betai: 0.0
  threshold: 1.0
  percentage: 0.0
  tol: 0.0
  transA: rocgraph_operation_none
  transB: rocgraph_operation_none
  baseA: rocgraph_index_base_zero
  baseB: rocgraph_index_base_zero
  baseC: rocgraph_index_base_zero
  baseD: rocgraph_index_base_zero
  action: rocgraph_action_numeric
  part: rocgraph_hyb_partition_auto
  matrix_type: rocgraph_matrix_type_general
  diag: rocgraph_diag_type_non_unit
  uplo: rocgraph_fill_mode_lower
  storage: rocgraph_storage_mode_sorted
  apol: rocgraph_analysis_policy_reuse
  spol: rocgraph_solve_policy_auto
  direction: rocgraph_direction_row
  order: rocgraph_order_column
  orderB: rocgraph_order_column
  orderC: rocgraph_order_column
  format: rocgraph_format_coo
  formatA: rocgraph_format_coo
  formatB: rocgraph_format_coo
  matrix: rocgraph_matrix_random
  matrix_init_kind: rocgraph_matrix_init_kind_default
  unit_check: 1
  timing: 0
  iters: 10
  denseld: -1
  batch_count: -1
  batch_count_A: -1
  batch_count_B: -1
  batch_count_C: -1
  batch_stride: -1
  ld_multiplier_B: 2
  ld_multiplier_C: 2
  algo: 0
  numericboost: 0
  boosttol: 0.0
  boostval: 1.0
  boostvali: 0.0
  tolm: 1.0
  graph_test: false
  workspace_size: 0
  category: nightly
  hardware: all
  skip_hardware: none
  req_memory: 4
  filename: '*'
  name: '*'
  index_type_I: i32
  index_type_J: i32
  a_type: f32_r
  b_type: f32_r
  c_type: f32_r
  x_type: f32_r
  y_type: f32_r
  compute_type: f32_r
  A_row_indextype: i32
  A_col_indextype: i32
  B_row_indextype: i32
  B_col_indextype: i32
  C_row_indextype: i32
  C_col_indextype: i32
